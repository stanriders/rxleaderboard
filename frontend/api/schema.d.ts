/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Score"][];
                        "application/json": components["schemas"]["Score"][];
                        "text/json": components["schemas"]["Score"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PlayersResult"];
                        "application/json": components["schemas"]["PlayersResult"];
                        "text/json": components["schemas"]["PlayersResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"];
                        "application/json": components["schemas"]["User"];
                        "text/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/search/{query}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    query: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"][];
                        "application/json": components["schemas"]["User"][];
                        "text/json": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{id}/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Score"][];
                        "application/json": components["schemas"]["Score"][];
                        "text/json": components["schemas"]["Score"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beatmaps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Beatmap"];
                        "application/json": components["schemas"]["Beatmap"];
                        "text/json": components["schemas"]["Beatmap"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beatmaps/{id}/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Score"][];
                        "application/json": components["schemas"]["Score"][];
                        "text/json": components["schemas"]["Score"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Beatmap: {
            /** Format: int32 */
            id: number;
            artist: string | null;
            title: string | null;
            /** Format: int32 */
            creatorId: number;
            /** Format: int32 */
            beatmapSetId: number;
            difficultyName: string | null;
            /** Format: double */
            approachRate: number;
            /** Format: double */
            overallDifficulty: number;
            /** Format: double */
            circleSize: number;
            /** Format: double */
            healthDrain: number;
            /** Format: double */
            beatsPerMinute: number;
            /** Format: int32 */
            circles: number;
            /** Format: int32 */
            sliders: number;
            /** Format: int32 */
            spinners: number;
            /** Format: double */
            starRatingNormal: number;
            /** Format: double */
            starRating?: number | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        Grade: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
        PlayersResult: {
            players?: components["schemas"]["User"][] | null;
            /** Format: int32 */
            total?: number;
        };
        Score: {
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            userId?: number;
            user?: components["schemas"]["User"];
            /** Format: int32 */
            beatmapId: number;
            beatmap?: components["schemas"]["Beatmap"];
            grade: components["schemas"]["Grade"];
            /** Format: double */
            accuracy: number;
            /** Format: int32 */
            combo: number;
            mods: string[] | null;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            totalScore: number;
            /** Format: int32 */
            count50: number;
            /** Format: int32 */
            count100: number;
            /** Format: int32 */
            count300: number;
            /** Format: int32 */
            countMiss: number;
            /** Format: double */
            pp?: number | null;
        };
        User: {
            /** Format: int32 */
            id: number;
            countryCode: string | null;
            username: string | null;
            /** Format: double */
            totalPp?: number | null;
            /** Format: double */
            totalAccuracy?: number | null;
            /** Format: date-time */
            updatedAt: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
